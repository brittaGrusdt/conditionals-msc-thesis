////////////  SET PARAMETERS  /////////////////
var alpha = 5
var thresholds = {t: 0.9, f: 0.05, likely: 0.7, theta: 0.9, theta_maybe: 0.5}
var literals = ["A", "C", "-A", "-C"]
var conditionals = ["If A, C", "If A, -C", "If -A, C", "If -A, -C",
                    "If C, A", "If C, -A", "If -C, A", "If -C, -A"]
var maybe = map(function(u){return "maybe ".concat(u)},
                literals)

var utteranceDict = {'literals': literals,
                     'if' : conditionals,
                     'maybe': maybe,
                     'conj' : ["A and C", "C but -A", "A but -C", "neither A nor C"],
                    }
var utterances = reduce(function(utts,acc){acc.concat(utts)},[],
                        Object.values(utteranceDict))
var independentNets = ["A ind. C"]
var dependentAC = ["A implies C", "A implies -C", "-A implies C", "-A implies -C"]
var dependentCA = ["C implies A", "C implies -A", "-C implies A", "-C implies -A"]
var dependentNets = dependentAC.concat(dependentCA)
var causalNets = independentNets.concat(dependentNets)

var params = {'none_p_ind': 1/3,
             'lawn_p_ind': 1/3,
             'pizza_p_ind': 1,
             'douven1_p_ind': 0.9,
             'wason-abstract_p_ind': 1/8,
             'amherst_p_ind': 1/3}

var roundTo3 = function(x){
  return Math.round(x*1000)/1000
}
// marginal probabilities
var pa = function(x){return x[0]+x[2]}
var pc = function(x){return x[0]+x[1]}
var pna = function(x){return x[1]+x[3]}
var pnc = function(x){return x[2]+x[3]}
// conditional probabilities
var pAgivenC = function(x){return x[0]/pc(x)}
var pAgivenNC = function(x){return x[2]/pnc(x)}
var pNAgivenC = function(x){return x[1]/pc(x)}
var pNAgivenNC = function(x){return x[3]/pnc(x)}
var pCgivenA = function(x){return x[0]/pa(x)}
var pCgivenNA = function(x){return x[1]/pna(x)}

///////////// PRIORS /////////////
var tablesPrior = mem(function(){
  return Infer({method:'forward', samples:5000, model:function(){
    var alpha = Vector(repeat(4, constF(0.25)));
    var vec = dirichlet({alpha})
    var table = Object.values(vec.data)
    return table
}})})

var tables = tablesPrior().support()
display('nb tables: ' + tables.length)

var span = 0.03
var logLikelihood = cache(function(table, cn){
  var p = cn=="A implies C" ? pCgivenA(table) :
  cn=='A implies -C' ? 1-pCgivenA(table)  :
  cn=='-A implies C' ? pCgivenNA(table) :
  cn=='-A implies -C' ? 1-pCgivenNA(table) :
  cn=="C implies A"  ? pAgivenC(table):
  cn=="C implies -A" ? 1-pAgivenC(table) :
  cn=="-C implies A" ? pAgivenNC(table) :
  cn=="-C implies -A" ? 1-pAgivenNC(table) :
  cn=="A ind. C" ? ((pCgivenA(table) >= (pCgivenNA(table) - span) &&
                    pCgivenA(table) <= (pCgivenNA(table) + span))
                    &&
                    (pAgivenC(table) >= (pAgivenNC(table) - span) &&
                    pAgivenC(table) <= (pAgivenNC(table) + span)) ? 0.99 : 0.01) :

  error('unknown cn in likelihood: ' + cn)

  var logL =  Beta({a:10, b:1}).score(p)
  return logL
})

var getCNpriors = function(p_ind){
  return [p_ind].concat(repeat(dependentNets.length,
                               function(){(1-p_ind)/dependentNets.length}))
}
var networkPrior = function(bias) {
  return categorical({vs: causalNets, ps: getCNpriors(params[bias+'_p_ind'])})
}

var bayesNetPrior = cache(function(bias){
  return Infer({method:'enumerate', model:function(){
    var table = uniformDraw(tables)
    var cn = networkPrior(bias)
    factor(logLikelihood(table, cn))
    if(bias=='lawn'){
      // if(pCgivenNA(table)<=1-thresholds.likely){factor(-Math.log(thresholds.f))}
      if(table[1]<=thresholds.f){factor(-Math.log(thresholds.f))}
    }else if(bias=='douven1'){
      if(pc(table)>=thresholds.likely){factor(-Math.log(thresholds.f))}
    }else if(bias=='amherst'){
      if(pa(table)>=thresholds.theta){factor(-Math.log(thresholds.f))}
    }
    return {"cn": cn, "table": table}
  }})
})

var qudPrior = Infer({method:'enumerate', model: function(){
  return categorical({vs: ['bn', 'table'], ps: [1,1]})}
})

///////////// MODEL /////////////
var utteranceProbs = cache(function(utterance, table){
  var p =
  utterance == "A" || utterance == 'maybe A' ? pa(table) :
  utterance == "C" || utterance == 'maybe C'? pc(table) :
  utterance == "-A" || utterance == 'maybe -A' ? pna(table) :
  utterance == "-C" || utterance == 'maybe -C' ? pnc(table) :
  utterance == "If A, C" ? table[0]/pa(table) :
  utterance == "If A, -C" ? table[2]/pa(table) :
  utterance == "If -A, C" ? table[1] / pna(table) :
  utterance == "If -A, -C" ? table[3] / pna(table) :
  utterance == "If C, A" ? table[0]/pc(table) :
  utterance == "If C, -A" ? table[1] / pc(table) :
  utterance == "If -C, A" ? table[2] / pnc(table):
  utterance == "If -C, -A" ? table[3] / pnc(table) :
  utterance == "A and C" ? table[0] :
  utterance == "neither A nor C" ? table[3] :
  utterance == "A but -C" ? table[2] :
  utterance == "C but -A" ? table[1] : error("unknown utterance " + utterance)
  return p
})

var meaning = cache(function(utterance, table, cn){
 var p = utteranceProbs(utterance, table)
 var p_holds = utterance.includes('maybe') ?
     (p >= thresholds.theta_maybe) : p >= thresholds.theta
 return p_holds
})

var literalListener = cache(function(utterance, qud, bias){
  Infer({method:'enumerate',model: function(){
    var bn = sample(bayesNetPrior(bias))
    condition(meaning(utterance, bn.table))
    if(qud == 'table'){return bn.table}
    else{return bn}
  }})
}, 10000)

var costs = function(utt){
  if(!utterances.includes(utt)){error('unknown utterance ' + utt)}
  var c1 = utt.includes('If') ? 0.55 : 0
  var c2 = utt.includes('and') || utt.includes('but') ? 0.25 : 0
  var c3 = utt.includes('not A') ? 0.125 : 0
  var c4 = utt.includes('not C') ? 0.125 : 0
  var c5 = utt.includes('maybe') ? 0.1 : 0
  var cost = c1 + c2 + c3 + c4 + c5

  return cost
}

var getEVs = function(listener, probFunc){
  var listener_avg = sum(map(function(LLtable) {
    Math.exp(listener.score(LLtable)) * probFunc(LLtable)
  }, listener.support()))
  return listener_avg
}

var utterancePrior = function(bias){
  var ps = bias=='lawn' ?
    map(function(u){
      var p =  (u!='C but -A') ? 1/(utterances.length-1) : 0
      return p
    }, utterances) : repeat(utterances.length,function(){return 1/utterances.length})

  return Infer({method:'enumerate', model:function(){
    var u = categorical({vs:utterances, ps:ps})
    return u
  }})
}

var speaker = cache(function(bn, bias, qud, printU){
  return Infer({method:'enumerate', model: function(){
    var utterance = sample(utterancePrior(bias))
    var LL = literalListener(utterance, qud, bias)
    var utility = qud=='bn' ? LL.score(bn) :
    qud=='table' ? LL.score(bn.table) :
    error('unknown speaker qud: ' + qud)
    if(printU && utility!=-Infinity){
      print(utterance + utility)
    }
    factor(alpha * (utility - costs(utterance)))
    return utterance
  }
 })
}, 10000)

var listener = function(utterance, bias, speakerQUD){
  return Infer({method:'enumerate', model:function(){
                  var bn = sample(bayesNetPrior(bias))
                  var qud = speakerQUD ? speakerQUD : sample(qudPrior)
                  observe(speaker(bn, bias, qud, false),utterance)
                  return {qud: qud, bn: bn}
                }})
}
var speakerExpectation = function(n, qud, bias, utterance){
  var bnsFromPrior = repeat(n, function(){return sample(bayesNetPrior(bias))})
  var likelihoods = map(function(bn){
    var speakerBeliefs = speaker(bn, bias, qud)
    var likelihood = Math.exp(speakerBeliefs.score(utterance))
    return likelihood
  }, bnsFromPrior)
  return likelihoods
}

//// VISUALIZATIONS ////
var marginalizeDependentNets = function(listener){
  return marginalize(listener, function(bn){
    return{causalNets: dependentAC.includes(bn.cn) ? 'A implies C' :
           dependentCA.includes(bn.cn) ? 'C implies A' : 'independent'}
  })
}

var evs = function(listener){
  return {'C|A': getEVs(listener, pCgivenA),
          'A|C': getEVs(listener, pAgivenC),
          'C|-A': getEVs(listener, pCgivenNA),
          'A|-C': getEVs(listener, pAgivenNC),
          'A': getEVs(listener, pa),
          'C': getEVs(listener, pc)}
}

var displayListener = function(listener, utterance, listenerType, bias){
  display([listenerType, utterance, bias].join(" %% "))
  viz(marginalize(listener, function(bn){return{causalNet: bn.cn}}))
//   viz(marginalizeDependentNets(listener))
  var listenerProbs = marginalize(listener, function(bn){return bn.table})
  var expVals = evs(listenerProbs)
  var z = map(function(k){display(k+' '+expVals[k])}, Object.keys(expVals))
  viz(marginalize(listenerProbs, function(table){return {pa:pa(table)}}))
  viz(marginalize(listenerProbs, function(table){return {pc:pc(table)}}))

  var pas = sort(repeat(1001, function(){return pa(sample(listenerProbs))}), gt)
  var pcs = sort(repeat(1001, function(){return pc(sample(listenerProbs))}), gt)
  var mean_pa = listMean(pas); var mean_pc = listMean(pcs);
  var std_pa = listStdev(pas, mean_pa); var std_pc = listStdev(pcs, mean_pc);
  display('mean_pa: ' + mean_pa + ' std_pa: ' + std_pa)
  display('mean_pc: ' + mean_pc + ' std_pc: ' + std_pc)
}

var displaySpeaker = function(bias, state, disp){
  display('bias: '.concat(bias))
  var qud = state.qud
  var state = state.sample=='LL' ?
      sample(literalListener(state.utterance, "bn", bias)) : (state.sample=='prior' ?
  sample(bayesNetPrior(bias)) : state)
  print('speaker p: ' + state.table)
  print('speaker cn: ' + state.cn)
  print('qud: ' + qud)
  var bn = {"cn": state.cn, "table": state.table}
  viz(speaker(bn, bias, qud, disp))
}
//-----SETUP VARIABLES-----//
var utterance = "If A, C"

var bias = "none"
// var bias = 'amherst'
// var bias = "wason-abstract"
// var bias = "wason-concrete"
// var bias = "pizza"
// var bias = "lawn-nn"
// var bias = "douven1"

//-----MAKE PLOTS-----//
// display('speakerOptimality: ' + alpha)

// var prior = bayesNetPrior(bias)
// viz(prior)
// viz.table(prior, {groupBy: 'cn'})
// displayListener(prior, '', 'Bayes Net Prior', bias)
// var independent_bns = filter(function(bn){bn.cn=='A implies C'}, prior.support())
// viz.table(independent_bns)
// var pcs = map(function(bn){return pc(bn.table)}, independent_bns)
// var pcas = map(function(bn){return pCgivenA(bn.table)}, independent_bns)
// viz.scatter(pcs,pcas)


// var LL = literalListener(utterance, 'bn', bias)
// viz.table(LL)
// displayListener(LL, utterance, 'LL', bias)
// viz.table(LL)
// var z = map(function(utterance){
//   print(utterance)
//   var LL = literalListener(utterance, 'bn', bias)
//   displayListener(LL, utterance, 'LL', bias)
// }, utterances)

// var state = {utterance:'If A, C', sample:'prior', qud:'bn-goal',
//              table:[0.001,0.9,0.09,0.009], cn:'-C implies A'}
// displaySpeaker(bias, state, true)

var PL = listener(utterance, bias, 'bn-goal')
// var PL = listener(utterance, bias)
var PLbn = marginalize(PL, function(s){return s['bn']})

displayListener(PLbn, utterance, 'Pragmatic Listener', bias)
// viz(marginalize(PL, function(s){return s['qud']}))

// var qud = "bn"
// map(function(){
//   var bn = sample(PLbn)
//   var state = {utterance:'If A, C', sample:'', qud:qud,
//                table:bn.table, cn:bn.cn}
//   displaySpeaker(bias, state)}, _.range(5))
