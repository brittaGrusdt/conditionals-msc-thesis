// Samples for graphs
var t = 0.95
var f = 0.05
var maybe = 0.5

// 1. samples for independent graphs
// samples: P(A), P(C)
var independentProbs = [[t, t], [t, f], [t, maybe],
      [f, t], [f, f], [f, maybe],
      [maybe, t], [maybe, f], [maybe, maybe]]

// 2. samples for dependent graphs
// samples: P(A),P(C|A),P(C|not A) or P(C),P(A|C),P(A|not C)
var dependentProbs = [[t,t, f], [f, t, f], [maybe, t, f],
[t, t, maybe], [f, t, maybe], [maybe, t, maybe],
[t, f, t], [f, f, t], [maybe, f, t],
[t, f, maybe], [f, f, maybe], [maybe, f, maybe],
[t, maybe, t], [f, maybe, t], [maybe, maybe, t],
[t, maybe, f], [f, maybe, f], [maybe, maybe, f],
[t, maybe, maybe], [f, maybe, maybe], [maybe, maybe, maybe]]

////////////  SET PARAMETERS  /////////////////
var biasFactor = 20

var speakerOptimality = 5
var threshold = 0.9
var threshold_likely = 0.5
var nsamples = 1500
var ntables = 500

var utterances = ["A", "C", "If A, C", "If C, A", "not A", "not C", "If A, not C",
                  "If not A, C", "If not A, not C", "If C, not A", "If not C, A",
                  "If not C, not A",
                  "A and C", "A but not C", "C but not A", "neither A nor C"]
//                   "A exor C",
//                   "Either both or none",
                  // "likely A", "likely C"]
var causalNets = ["A ind. C",
          "A implies C", "A implies not C",
                  "not A implies C", "not A implies not C",
                  "C implies A", "C implies not A",
                  "not C implies A", "not C implies not A"]
/////////////////////////////////////////////
var buildTable = function(probs, cn){
  var table =
    cn=='A ind. C' ?
        [probs[0]*probs[1], (1-probs[0])*probs[1],
         probs[0]*(1-probs[1]), (1-probs[0])*(1-probs[1])] :

    cn=='A implies C'  ?
        [probs[0]*probs[1], (1-probs[0])*probs[2],
         probs[0]*(1-probs[1]), (1-probs[0])*(1-probs[2])] :

    cn=='A implies not C' ?
        [(1-probs[1]) * probs[0], (1-probs[2]) * (1-probs[0]),
         probs[1] * probs[0]    , probs[2] * (1-probs[0])] :

    cn=='not A implies C' ?
        [(1-probs[0])*probs[2]    , probs[1] * probs[0],
         (1-probs[0])*(1-probs[2]), (1-probs[1])*probs[0]] :

    cn=='not A implies not C' ?
        [(1-probs[2]) * (1-probs[0]), (1-probs[1]) * probs[0],
         probs[2] * (1-probs[0])    , probs[1]*probs[0]] :

    cn=='C implies A' ?
        [probs[0]*probs[1]    , (1-probs[1]) * probs[0],
         probs[2]*(1-probs[0]), (1-probs[2])*(1-probs[0])] :

    cn=='C implies not A' ?
        [(1-probs[1]) * probs[0]   , probs[1] * probs[0],
        (1-probs[2]) * (1-probs[0]), probs[2] * (1-probs[0])] :

    cn=='not C implies A' ?
        [(1-probs[0])*probs[2], (1-probs[2]) * (1-probs[0]),
         probs[1]*probs[0], (1-probs[1])*probs[0]] :

    cn=='not C implies not A' ?
        [(1-probs[2]) * (1-probs[0]), probs[2] * (1-probs[0]),
         (1-probs[1]) * probs[0], probs[1]*probs[0]] :

    error("probability table cannot be build for cn " + cn)
    return table
}

// marginal probabilities
var pa = function(x){return x[0]+x[2]}
var pc = function(x){return x[0]+x[1]}
var pna = function(x){return x[1]+x[3]}
var pnc = function(x){return x[2]+x[3]}
// conditional probabilities
var pAgivenC = function(x){return x[0]/pc(x)}
var pAgivenNC = function(x){return x[2]/pnc(x)}
var pNAgivenC = function(x){return x[1]/pc(x)}
var pNAgivenNC = function(x){return x[3]/pnc(x)}
var pCgivenA = function(x){return x[0]/pa(x)}
var pCgivenNA = function(x){return x[1]/pna(x)}

var utteranceProbs = cache(function(utterance, table){
  var p = utterance == "A" ? pa(table) :
  utterance == "C" ? pc(table) :
  utterance == "If A, C" ? table[0]/pa(table) :
  utterance == "If C, A" ? table[0]/pc(table) :
  utterance == "not A" ? pna(table) :
  utterance == "not C" ? pnc(table) :
  utterance == "If A, not C" ? table[2]/pa(table) :
  utterance == "If not A, C" ? table[1] / pna(table) :
  utterance == "If not A, not C" ? table[3] / pna(table) :
  utterance == "If C, not A" ? table[1] / pc(table) :
  utterance == "If not C, A" ? table[2] / pnc(table):
  utterance == "If not C, not A" ? table[3] / pnc(table) :
  utterance == "Either both or none" ? table[0]+table[3] :
  utterance == "likely A" ? table[0] + table[2] :
  utterance == "likely C" ? table[0] + table[1] :
  utterance == "A exor C" ? table[1] + table[2] :
  utterance == "A and C" ? table[0] :
  utterance == "neither A nor C" ? table[3] :
  utterance == "A but not C" ? table[2] :
  utterance == "C but not A" ? table[1] :
  utterance == "" ?
    true : error("unknown utterance " + utterance)
  return p
})

var meaning = cache(function(utterance, table){
 var p = utteranceProbs(utterance, table)
 var holds = utterance == 'likely A' || utterance == 'likely C' ?
     p > threshold_likely : p > threshold

return holds
})

//PRIORS
var networkPrior = function() {
  var net = uniformDraw(causalNets)
  return net
}

var bayesNetPrior = cache(function(bias){
  return Infer({method:'enumerate', model:function(){
    var cn = networkPrior()
    var probs = cn=='A ind. C' ? uniformDraw(independentProbs) :
      uniformDraw(dependentProbs)

    var table = buildTable(probs, cn)
    // if(bias==){
        // factor(independentNets.includes(causalNet) ||
          // biscuitNets.includes(causalNet) ? -Math.log(1/biasFactor) : 0)

    // } else if(bias==''){
       // factor(dependentNets.includes(causalNet) ||
              // perfectionNets.includes(causalNet) ? -Math.log(1/biasFactor) : 0)
    // }
    return {'cn': cn, 'jointP': table}
  }})
})

// MODEL
var literalListener = cache(function(utterance, query, cn, bias){
  Infer({method:'enumerate',model: function(){
    var bn = sample(bayesNetPrior(bias))
    condition(bn.cn==cn)
    condition(meaning(utterance, bn['jointP']))
    if(query == 'cn'){return bn['cn']}
    else if(query == 'jointP'){return bn['jointP']}
    else{return bn}
  }})
})

var KL = function(approx_probability_input, true_probability_input){
  var true_probability = _.isArray(true_probability_input) ?
     true_probability_input :
     [true_probability_input, 1 - true_probability_input]
  var approx_probability = _.isArray(approx_probability_input) ?
     approx_probability_input :
     [approx_probability_input, 1 - approx_probability_input]
  sum(map(function(cell) {
    if(true_probability[cell] == 0){0}
    else if(approx_probability[cell]==0){error('undefined KL')}
    else{
      true_probability[cell] *
       Math.log(true_probability[cell] / approx_probability[cell])
    }}, _.range(true_probability.length)))
}

var get_LL_avg = cache(function(utterance, cn, bias) {
  var LL = literalListener(utterance, 'jointP', cn, bias)
  var LL_avg = map(function(cell){ sum(map(function(LLtable) {
    Math.exp(LL.score(LLtable)) * LLtable[cell]
  },
                   LL.support()))}, _.range(4))
  return(LL_avg)
})

var get_EU_avg = function(utterance, table, qud, cn, bias) {
  var LL_avg = get_LL_avg(utterance, cn, bias)
  var utility = qud=='C' ? -KL(pc(table), pc(LL_avg)) :
                qud=='A' ? -KL(pa(table), pa(LL_avg)) :
                -KL(table, LL_avg)
  return utility

}

var speaker = cache(function(table, qud, cn, bias){
  return Infer({method:'enumerate', model: function(){
    var utterance = uniformDraw(utterances)
    var utility = get_EU_avg(utterance, table, qud, cn, bias)
    factor(speakerOptimality * utility)
    return utterance
  }
 })
})

var listener = function(utterance, qud, bias){
//   return Infer({method:'MCMC', samples:nsamples, lag:1, burn:100,
//                 callbacks: [editor.MCMCProgress()],  model:function(){
    return Infer({method:'rejection',samples:nsamples, model:function(){
      var bn = sample(bayesNetPrior(bias))
      observe(speaker(bn['jointP'], qud, bn.cn, bias),utterance)
      return bn
    }
   })
}

var displayLL = function(utterance, query, cn, bias){
  display('Literal Listener hears: ' + utterance)
  if(query=='jointP'){
    var LL = literalListener(utterance, "jointP", cn, bias)
    viz(marginalize(LL, function(x){return {pC: x[0]+x[1]}}))
    viz(marginalize(LL, function(x){return {pCgivenA: x[0]/(x[0]+x[2])}}))
    viz(marginalize(LL, function(x){return {pA: x[0]+x[2]}}))
    viz(marginalize(LL, function(x){return {pAgivenC: x[0]/(x[0]+x[1])}}))
    viz(marginalize(LL, function(x){return {pac: x[0]}}))
    viz(marginalize(LL, function(x){return {pnac: x[1]}}))
    viz(marginalize(LL, function(x){return {panc: x[2]}}))
    viz(marginalize(LL, function(x){return {pnanc: x[3]}}))
  }else if(query=='cn'){
    var LL = literalListener(utterance, 'cn', cn, bias)
    viz(LL)
  }else{error('only marginals supported for visualizing LL')}
}

var displayS = function(utterance, qud, cn, bias){
  qud ? display('qud is: ' + qud) : display('qud is not used')
  var LL = sample(literalListener(utterance, "bn", cn, bias))
  display('speaker p: ' + LL.jointP)
  display('speaker cn: ' + LL.cn)
  viz(speaker(LL.jointP, qud, cn, bias))
}

var displayPL = function(pragListener){
  viz(marginalize(pragListener, function(bn){return{causalNet: bn.cn}}))
  viz(marginalize(pragListener, function(bn){return{jointP: bn.jointP}}))
//   viz(marginalize(pragListener, function(bn){return {pC: pc(bn['jointP'])}}))
//   viz(marginalize(pragListener, function(bn){return {pA: pa(bn['jointP'])}}))
//   viz(marginalize(pragListener, function(bn){
//     return {pCgivenA: pCgivenA(bn['jointP'])}}))
//   viz(marginalize(pragListener, function(bn){
//     return {pAgivenC: pAgivenC(bn['jointP'])}}))
}

var getEVs = function(listener, probFunc){
  var listener_avg = sum(map(function(LLtable) {
    Math.exp(listener.score(LLtable)) * probFunc(LLtable)
  }, listener.support()))
  return listener_avg
}

var evs = function(pragListener){
  return {'C|A': getEVs(pragListener, pCgivenA),
          'A|C': getEVs(pragListener, pAgivenC),
          'C|-A': getEVs(pragListener, pCgivenNA),
          'A|-C': getEVs(pragListener, pAgivenNC),
          'A': getEVs(pragListener, pa),
          'C': getEVs(pragListener, pc)}
}
//PLOTS
var utterance = "If A, C"

var causalNet = "A implies C"
var query = "jointP"
var qud = ""
var bias = ""
// viz(marginalize(bayesNetPrior(''), function(bn){bn.cn}))

// Literal listener
// displayLL(utterance, 'cn', causalNet, bias)
// display('LL_avg for utterance: ' + utterance)
// display(get_LL_avg(utterance, causalNet, bias))

// Pragmatic speaker
// var p = [0.677, 0.29, 0.001, 0.032]
// var p = [0.274, 0.159, 0.019, 0.548]
// var p = [0.246, 0.321, 0.014, 0.419]
// var p = [0.048, 0.617, 0.003, 0.332]
// var p = [0.024375,0.365625,0.0006250000000000006,0.609375]
// display('Pragmatic speakers table: ' + p)
// viz(speaker(p, qud, causalNet, bias))

// displayS(utterance, qud, causalNet, bias)

// Pragmatic Listener
display('Pragmatic Listener hears: ' + utterance)

var pragListener = listener(utterance, qud, bias)
display('nb distinct samples: ' + Object.keys(pragListener.getDist()).length)
displayPL(pragListener)

var listenerProbs = marginalize(pragListener, function(bn){return bn['jointP']})
print(evs(listenerProbs))
// pragListener
