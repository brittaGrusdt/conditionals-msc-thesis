////////////  SET PARAMETERS  /////////////////
var alpha = 5
var thresholds = {t: 0.9, f: 0.05, likely: 0.7, theta: 0.9, theta_maybe: 0.5}
var literals = ["A", "C", "-A", "-C"]
var conditionals = ["If A, C", "If A, -C", "If -A, C", "If -A, -C",
                    "If C, A", "If C, -A", "If -C, A", "If -C, -A"]
var maybe = map(function(u){return "maybe ".concat(u)},
                literals)

var utteranceDict = {'literals': literals,
                     'if' : conditionals,
                     'maybe': maybe,
                     'conj' : ["A and C", "C but -A", "A but -C", "neither A nor C"],
                    }
var utterances = reduce(function(utts,acc){acc.concat(utts)},[],
                        Object.values(utteranceDict))
var independentNets = ["A ind. C"]
var dependentAC = ["A implies C", "A implies -C", "-A implies C", "-A implies -C"]
var dependentCA = ["C implies A", "C implies -A", "-C implies A", "-C implies -A"]
var dependentNets = dependentAC.concat(dependentCA)
var causalNets = independentNets.concat(dependentNets)

var params = {'none_p_ind': 1/3,
             'lawn_p_ind': 1/3,
             'pizza_p_ind': 1,
             'douven1_p_ind': 0.9,
             'wason-abstract_p_ind': 1/8,
             'amherst_p_ind': 1/3}

var roundTo3 = function(x){
  return Math.round(x*1000)/1000
}
// marginal probabilities
var pa = function(x){return x[0]+x[2]}
var pc = function(x){return x[0]+x[1]}
var pna = function(x){return x[1]+x[3]}
var pnc = function(x){return x[2]+x[3]}
// conditional probabilities
var pAgivenC = function(x){return x[0]/pc(x)}
var pAgivenNC = function(x){return x[2]/pnc(x)}
var pNAgivenC = function(x){return x[1]/pc(x)}
var pNAgivenNC = function(x){return x[3]/pnc(x)}
var pCgivenA = function(x){return x[0]/pa(x)}
var pCgivenNA = function(x){return x[1]/pna(x)}

///////////// PRIORS /////////////
var tablesPrior = mem(function(){
  return Infer({method:'forward', samples:5000, model:function(){
    var alpha = Vector(repeat(4, constF(0.25)));
    var vec = dirichlet({alpha})
    var table = Object.values(vec.data)
    return table
}})})

var tables = tablesPrior().support()
display('nb tables: ' + tables.length)

var span = 0.03
var logLikelihood = cache(function(table, cn){
  var p = cn=="A implies C" ? pCgivenA(table) :
  cn=='A implies -C' ? 1-pCgivenA(table)  :
  cn=='-A implies C' ? pCgivenNA(table) :
  cn=='-A implies -C' ? 1-pCgivenNA(table) :
  cn=="C implies A"  ? pAgivenC(table):
  cn=="C implies -A" ? 1-pAgivenC(table) :
  cn=="-C implies A" ? pAgivenNC(table) :
  cn=="-C implies -A" ? 1-pAgivenNC(table) :
  cn=="A ind. C" ? ((pCgivenA(table) >= (pCgivenNA(table) - span) &&
                    pCgivenA(table) <= (pCgivenNA(table) + span))
                    &&
                    (pAgivenC(table) >= (pAgivenNC(table) - span) &&
                    pAgivenC(table) <= (pAgivenNC(table) + span)) ? 0.99 : 0.01) :

  error('unknown cn in likelihood: ' + cn)

  var logL =  Beta({a:10, b:1}).score(p)
  return logL
})

var getCNpriors = function(p_ind){
  return [p_ind].concat(repeat(dependentNets.length,
                               function(){(1-p_ind)/dependentNets.length}))
}
var networkPrior = function(bias) {
  return categorical({vs: causalNets, ps: getCNpriors(params[bias+'_p_ind'])})
}

var bayesNetPrior = cache(function(bias){
  return Infer({method:'enumerate', model:function(){
    var table = uniformDraw(tables)
    var cn = networkPrior(bias)
    factor(logLikelihood(table, cn))

    // condition(table[2]<=0.1) // for plot
    if(bias=='lawn'){
      // if(pCgivenNA(table)<=1-thresholds.likely){factor(-Math.log(thresholds.f))}
      if(table[1]<=thresholds.f){factor(-Math.log(thresholds.f))}
    }else if(bias=='douven1'){
      if(pc(table)>=thresholds.likely){factor(-Math.log(thresholds.f))}
    }else if(bias=='amherst'){
      if(pa(table)>=thresholds.theta){factor(-Math.log(thresholds.f))}
    }
    return {"cn": cn, "table": table}
  }})
})

// ---For R-scripts---
// visualize.r plotTablesPrior()
var bias = "none"
var prior = bayesNetPrior(bias)
prior