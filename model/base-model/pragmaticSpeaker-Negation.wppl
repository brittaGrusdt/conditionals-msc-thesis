var granularity = 20
var roundTo3 = cache(function(x){
  return Math.round(x*1000)/1000
  }
)

var midBins = map(function(x) {roundTo3(x/granularity + 1/(2*granularity))},
                  _.range(0,granularity))

var DiscreteBeta = cache(function(a, b){
  Infer({model: function(){
    categorical({
      vs:midBins,
      ps:map(function(x){
        // var xi = x >= 1 ? 0.99 : x == 0 ? 0.01 : x
        Math.exp(Beta({a, b}).score(x))
      }, midBins)
    })
  }})
})

var networkPrior = function() {
  var net = uniformDraw(["A implies C",
                         "C implies A",
                         "A ind. C"])
  return net
 }

var pAIndependentC = function(){
    var A = sample(DiscreteBeta(1,1))
    var C = sample(DiscreteBeta(1,1))
    var jointP = [A*C    , (1-A)* C,
                  A*(1-C), (1-A)*(1-C)]
    return jointP
}

var pADependentC = function(){
    var C = sample(DiscreteBeta(1,1))
    var A_givenC = sample(DiscreteBeta(1,1))
    var A_givenNotC = sample(DiscreteBeta(1,1))

    var jointP = [A_givenC*C    , (1-A_givenC)* C,
                  A_givenNotC*(1-C), (1-A_givenNotC)*(1-C)]
    return jointP
}

var pCDependentA = function(){
    var A = sample(DiscreteBeta(1,1))
    var C_givenA = sample(DiscreteBeta(1,1))
    var C_givenNotA =sample(DiscreteBeta(1,1))

    var jointP = [A*C_givenA    , (1-A)* C_givenNotA,
                  A*(1-C_givenA), (1-A)*(1-C_givenNotA)]
    return jointP
}

var statePrior = function() {
  // a state is a pair of a causal network and a joint probability
  // of all propositions
  //
  // joint probability table:
  //          A          |   not A
  //        -------------------------   ------
  //  C    | P(A=1, C=1) | P(A=0, C=1)| P(C=1)
  // not C | P(A=1, C=0) | P(A=0, C=0)| P(C=0)
  //        -------------------------   ------
  //       | P(A=1)      | P(A=0)     |   1
    var causalNet = networkPrior()

    if (causalNet == "A ind. C") {
      var prob = pAIndependentC();
      return({causalNet : causalNet,
              jointP : prob})
    }
    if (causalNet == "A implies C"){
      var prob = pCDependentA();
      return({causalNet : causalNet,
              jointP : prob})

    }
    if (causalNet == "C implies A"){
      var prob = pADependentC();
      return({causalNet : causalNet,
              jointP : prob})
    }
}

var utterances = ["A", "C", "If A, C", "If C, A",
"not A", "not C",
"If not A, C",
"If not A, not C",
"If A, not C",
"If not C, A",
"If not C, not A",
"If C, not A"
]
var threshold = 0.9

// meaning function to interpret the utterances
var meaning = function(utterance, state){
  // P(A) > threshold ?
  utterance == "A" ?
    state['jointP'][0] + state['jointP'][2] > threshold :

  utterance == "C" ?
    state['jointP'][0] + state['jointP'][1] > threshold :

  utterance == "If A, C" ?
    state['jointP'][0] > ((state['jointP'][2] + state['jointP'][0]) * threshold) :

  utterance == "If C, A" ?
    state['jointP'][0] > ((state['jointP'][1] + state['jointP'][0]) * threshold):

  utterance == "not A" ?
    state['jointP'][1] + state['jointP'][3] > threshold :

  utterance == "not C" ?
    state['jointP'][2] + state['jointP'][3] > threshold :

  utterance == "If not A, C" ?
    state['jointP'][1] > (state['jointP'][1] + state['jointP'][3]) * threshold :

  utterance == "If not A, not C" ?
    state['jointP'][3] > (state['jointP'][1] + state['jointP'][3]) * threshold :

  utterance == "If A, not C" ?
    state['jointP'][2] > (state['jointP'][0] + state['jointP'][2]) * threshold :

  utterance == "If not C, A" ?
    state['jointP'][2] > (state['jointP'][2] + state['jointP'][3]) * threshold :

  utterance == "If not C, not A" ?
      state['jointP'][3] > (state['jointP'][2] + state['jointP'][3]) * threshold :

  utterance == "If C, not A" ?
    state['jointP'][1] > (state['jointP'][0] + state['jointP'][1]) * threshold :

  utterance == "" ?
    true :
  -1
}

// literal listener
var literalListener = function(utterance){
  Infer({method: "enumerate",
         model: function(){
           var state = statePrior();
           condition(meaning(utterance, state))
           return state
         }})
}

// PRAGMATIC SPEAKER

// set speaker optimality
var alpha = 5
// speaker utility factors
var beta0 = 0.5
var beta1 = 0.5
display('proportion prob: ' + beta0)
display('proportion BN: ' + beta1)

// KL-divergence
var KL = function(speaker_probability, listener_probability){
  sum(map(function(cell) {
    if(speaker_probability[cell] == 0 || listener_probability==0){
      0
    }else{
    speaker_probability[cell] *
       Math.log(speaker_probability[cell] / listener_probability[cell])
    }}, _.range(4)))
}

// pragmatic speaker
var speaker = cache(function(state) {
  return Infer({model: function(){
    var utterance = uniformDraw(utterances)
    var LLp = marginalize(literalListener(utterance), function(x){x['jointP']})
    var LLbn = marginalize(literalListener(utterance), function(x){x['causalNet']})

    var LLprob = sample(LLp)
    var KLdiv = - KL(state['jointP'], LLprob)

    factor(alpha*(beta0 * (KLdiv)+
                  beta1 * LLbn.score(state['causalNet'])))
   return utterance
  }})
})

// DISPLAY PRAGMATIC SPEAKER INFERENCES
var displaySpeaker = cache(function(state){
  display('speaker: ' + state['jointP'] + ', ' + state['causalNet'])
  viz(speaker(state))
})

// var jointP = [0.8, 0, 0.2, 0]
// var jointP = [0, 0.8, 0, 0.2]
var jointP = [0.4, 0.2, 0.1, 0.3]

// var state = [0, 0.2, 0, 0.8]
// var jointP = [0.2, 0.0, 0.8, 0.0]
// var bn = 'A ind. C'
var bn = 'A implies C'
//var bn = 'C implies A'
var state = {'jointP': jointP, 'causalNet': bn}
displaySpeaker(state)
